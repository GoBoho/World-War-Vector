<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Tank</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initilizing Variables
Screenshot = 0
//Misc
tankAngle = 0;
tankRadian = 0;
cannonAngle = 0;
cannonRadian = 0;
direction = -90
fireRate = 0;
targetX = 0;
targetY = -75;
HP = 3;
global.Score = 0;

//Health Regen
alarm[1] = 120

//Tank
tank[0,0] = -4; //A
tank[0,1] = -4;
tank[1,0] = -3;  //B
tank[1,1] = -5;
tank[2,0] = -2; //C
tank[2,1] = -5;
tank[3,0] = -1;  //D
tank[3,1] = -4;
tank[4,0] = 1; //E
tank[4,1] = -4;
tank[5,0] = 2;  //F
tank[5,1] = -5;
tank[6,0] = 3; //G
tank[6,1] = -5;
tank[7,0] = 4; //H
tank[7,1] = -4;
tank[8,0] = 4; //I
tank[8,1] = 4;
tank[9,0] = 3; //J
tank[9,1] = 5;
tank[10,0] = -3; //K
tank[10,1] = 5; 
tank[11,0] = -4; //L
tank[11,1] = 4;

//Cannon
cannon[0,0] = -2; //a
cannon[0,1] = -2;
cannon[1,0] = -1; //b
cannon[1,1] = -2;
cannon[2,0] = -1; //c
cannon[2,1] = -7;
cannon[3,0] = 0; //d
cannon[3,1] = -7;
cannon[4,0] = 1; //e
cannon[4,1] = -7;
cannon[5,0] = 1; //f
cannon[5,1] = -2;
cannon[6,0] = 2; //g
cannon[6,1] = -2;
cannon[7,0] = 2; //h
cannon[7,1] = 2;
cannon[8,0] = -2; //i
cannon[8,1] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health Regen
if (HP &lt; 3)
    {
        HP += 1
    }
alarm[1] = 120
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invincible Timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotating the Cannon

var i = 0; //Point within Array
var xMem = 0; // Stores the Past X for Change in Y

//Checks for Player Input: Turn ClockWise
if (keyboard_check(vk_right)) 
{
    cannonAngle += 5; //Turning Speed
    cannonRadian = degtorad(cannonAngle); //Converts Degrees to Radians

    //Turning Target
    xMem = targetX; //Current X in the Matrix
    targetX = (targetX)*cos(cannonRadian) - (targetY)*sin(cannonRadian); //Files through X and Translates to new X
    targetY = (targetY)*cos(cannonRadian) + (xMem)*sin(cannonRadian);
            
    //Changing Values in Matrix: Rotation 
    for (i = 0; i &lt; 9; i++)
    { 
        xMem = cannon[i,0]; //Current X in the Matrix
        cannon[i,0] = (cannon[i,0])*cos(cannonRadian) - (cannon[i,1])*sin(cannonRadian); //Files through X and Translates to new X
        cannon[i,1] = (cannon[i,1])*cos(cannonRadian) + (xMem)*sin(cannonRadian); //Files through Y and Translates to new Y
    }
    cannonAngle = 0; //Reset Angle
}

//Checks for Player Input: Turn CounterClockWise
if (keyboard_check(vk_left))
{
    cannonAngle -= 5;
    cannonRadian = degtorad(cannonAngle);
    
    //Turning Target
    xMem = targetX; //Current X 
    targetX = (targetX)*cos(cannonRadian) - (targetY)*sin(cannonRadian); //Files through X and Translates to new X
    targetY = (targetY)*cos(cannonRadian) + (xMem)*sin(cannonRadian);
    
    for (i = 0; i &lt; 9; i++)
    { 
        xMem = cannon[i,0];
        cannon[i,0] = (cannon[i,0])*cos(cannonRadian) - (cannon[i,1])*sin(cannonRadian);
        cannon[i,1] = (cannon[i,1])*cos(cannonRadian) + (xMem)*sin(cannonRadian);
    }
    cannonAngle = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if (keyboard_check(ord("W")))
{
   speed = -1
} else
    { speed = 0
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting
if (fireRate &gt; 0) 
{
    fireRate -= 1;
}

if (fireRate = 0)
{
    fireRate = 10;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if (HP &lt;= 0)
    {
        room_goto(Game_Over);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotating the Tank

var i = 0; //Point within Array
var xMem = 0; // Stores the Past X for Change in Y

if (keyboard_check(ord("D"))) //Checks for Player Input: Turn ClockWise
{
        direction -= 5; //Turning the Direction of Motion
        tankAngle += 5; //Image Turning Speed
        tankRadian = degtorad(tankAngle); //Converts Degrees to Radians

    //Changing Values in Matrix: Rotation 
    for (i = 0; i &lt; 12; i++)
    { 
        xMem = tank[i,0]; //Current X in the Matrix
        tank[i,0] = (tank[i,0])*cos(tankRadian) - (tank[i,1])*sin(tankRadian); //Files through X and Translates to new X
        tank[i,1] = (tank[i,1])*cos(tankRadian) + (xMem)*sin(tankRadian); //Files through Y and Translates to new Y
    }
    tankAngle = 0; //Reset Angle
}

if (keyboard_check(ord("A")))
{
        direction += 5;
        tankAngle -= 5;
        tankRadian = degtorad(tankAngle);
    for (i = 0; i &lt; 12; i++)
    { 
        xMem = tank[i,0];
        tank[i,0] = (tank[i,0])*cos(tankRadian) - (tank[i,1])*sin(tankRadian);
        tank[i,1] = (tank[i,1])*cos(tankRadian) + (xMem)*sin(tankRadian);
    }
    tankAngle = 0;
}
image_angle = direction - 90
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide With Solid
speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide With Solid
speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Tank and Cannon

draw_set_color(c_white); //Sets line color to white.
var i = 0;

//Draws line from a location in the matrix where i is at.

///Draw Cannon
draw_set_color(c_white);
i = 0;
for (i = 0; i &lt; 8; i++)
    { if (i != 8)
        { draw_line(x + cannon[i,0],y + cannon[i,1], x + cannon[i + 1,0], y + cannon[i + 1,1])
        }
    }
draw_line(x + cannon[0,0],y + cannon[0,1], x + cannon[8,0], y + cannon[8,1])
    
//Draw Tank  
for (i = 0; i &lt; 11; i++)
    { if (i != 11)
        { draw_line(x + tank[i,0],y + tank[i,1], x + tank[i + 1,0], y + tank[i + 1,1])
        }
    }
draw_line(x + tank[0,0],y + tank[0,1], x + tank[11,0], y + tank[11,1])

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cannon
draw_set_color(c_white);

//Checking for shoot input. 
if ((fireRate &gt;= 0 &amp;&amp; fireRate &lt;= 4) &amp;&amp; (keyboard_check(vk_space))) 
    {
        draw_line(x + cannon[3,0], y + cannon[3,1], x + targetX, y + targetY);
        var i = collision_line(x + cannon[3,0], y + cannon[3,1], x + targetX, y + targetY, Obj_Enemy, false, false);
        if (i != 0)
            {
                with(i) 
                {
                    instance_destroy();
                }
            }
    }

//Reticule
draw_line(x + targetX - 2, y + targetY, x + targetX, y + targetY + 2);
draw_line(x + targetX, y + targetY + 2, x + targetX + 2, y + targetY);
draw_line(x + targetX + 2, y + targetY, x + targetX, y + targetY - 2);
draw_line(x + targetX, y + targetY - 2, x + targetX - 2, y + targetY);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HUD
draw_set_color(c_white);
draw_set_font(font0);
draw_set_halign(fa_left);

//Draw X and Y Values
draw_text(6, 180, "(" + string(x - 128) + " , " + string((y - 96) * -1) + ")");

//HP
var i = 0;
draw_text(5, 5, "HP:");
for (i = 0; i &lt; HP ; i++)
    {
        draw_set_color(c_white);
        draw_set_font(font0);
        draw_text(20 + (6 * i), 5, "0")
    }

//Score
draw_set_halign(fa_right);
draw_text(251, 5, "Score: " + string(global.Score));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart Room
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_save("WorldWarV"+string(Screenshot)+".png");
Screenshot += 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
