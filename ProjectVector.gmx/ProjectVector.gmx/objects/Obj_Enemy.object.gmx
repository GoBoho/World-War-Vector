<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Enemy</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initilizing Variables
state = "Moving";
tankAngle = 0;
tankRadian = 0;
cannonAngle = 0;
cannonRadian = 0;
fireAngle = 0 //image_angle for the Cannon
fireRate = 0
targetX = 0;
targetY = -75;
direction = 5 * irandom_range(0, 72);

//Enemy Tank
etank[0,0] = -2; //A
etank[0,1] = -5; 
etank[1,0] = 0; //B
etank[1,1] = -3; 
etank[2,0] = 2; //C
etank[2,1] = -5; 
etank[3,0] = 4; //D
etank[3,1] = 0; 
etank[4,0] = 2; //E
etank[4,1] = 3; 
etank[5,0] = -2; //F
etank[5,1] = 3; 
etank[6,0] = -4; //G
etank[6,1] = 0; 

//Enemy Cannon
ecannon[0,0] = -1; //a
ecannon[0,1] = -1; 
ecannon[1,0] = -1; //b
ecannon[1,1] = -7; 
ecannon[2,0] = 0; //c
ecannon[2,1] = -7; 
ecannon[3,0] = 1; //d
ecannon[3,1] = -7; 
ecannon[4,0] = 1; //e
ecannon[4,1] = -1; 
ecannon[5,0] = 2; //f
ecannon[5,1] = 0; 
ecannon[6,0] = 0; //g
ecannon[6,1] = 2; 
ecannon[7,0] = -2; //h
ecannon[7,1] = 0; 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawn
if (place_meeting(x,y,Obj_Enemy))
    {
        instance_destroy()
    }
if (place_meeting(x,y,Obj_Solid))
    {
        instance_destroy()
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Score Addition
global.Score += 150;
Obj_Spawn_Controller.spawn += 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set speed to 0
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stopping
state = "Idle";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI
if (state = "Moving" &amp;&amp; image_angle - 90 = direction)
    {
        speed = -1;
        if (alarm[0] = -1)
            {
                alarm[0] = 360;
            }
    } else { 
        speed = 0;
        if (image_angle - 90 = direction)
        {
            direction = 5 * irandom_range(0, 72);
            state = "Moving";
        }
    }
if (alarm[0] != -1 &amp;&amp; image_angle - 90 != direction)
    {
        alarm[0] = -1;
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotating Tank
var xMem = 0;
var i = 0;

if (image_angle - 90 != direction) //Checks for Player Input: Turn ClockWise
{
        if (image_angle - 90 &lt; direction)
        {
            tankAngle -= 5; //Image Turning Speed
            image_angle += 5;
        }
        
        if (image_angle - 90 &gt; direction)
        {
            tankAngle += 5; //Image Turning Speed
            image_angle -= 5;
        }
        tankRadian = degtorad(tankAngle); //Converts Degrees to Radians

    //Changing Values in Matrix: Rotation 
    for (i = 0; i &lt; 7; i++)
    { 
        xMem = etank[i,0]; //Current X in the Matrix
        etank[i,0] = (etank[i,0])*cos(tankRadian) - (etank[i,1])*sin(tankRadian); //Files through X and Translates to new X
        etank[i,1] = (etank[i,1])*cos(tankRadian) + (xMem)*sin(tankRadian); //Files through Y and Translates to new Y
    }
    tankAngle = 0; //Reset Angle
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rotating Cannon
var xMem = 0;
var i = 0;

if (!instance_exists(Obj_Player))
    { exit
    }

var playerDirection = point_direction(x,y,Obj_Player.x,Obj_Player.y)


if (distance_to_object(Obj_Player) &lt; 64)
    { if (fireAngle + 90 != playerDirection) //Checks for Player Input: Turn ClockWise
        {
                if (fireAngle + 90 &lt; playerDirection)
                    {
                        cannonAngle -= 3; //Image Turning Speed
                        fireAngle += 3;
                    }
                
                if (fireAngle + 90 &gt; playerDirection)
                    {
                        cannonAngle += 3; //Image Turning Speed
                        fireAngle -= 3;
                    }
                cannonRadian = degtorad(cannonAngle); //Converts Degrees to Radians
            //Turning Target
            xMem = targetX; //Current X in the Matrix
            targetX = (targetX)*cos(cannonRadian) - (targetY)*sin(cannonRadian); //Files through X and Translates to new X
            targetY = (targetY)*cos(cannonRadian) + (xMem)*sin(cannonRadian);
            //Changing Values in Matrix: Rotation 
            for (i = 0; i &lt; 8; i++)
                { 
                    xMem = ecannon[i,0]; //Current X in the Matrix
                    ecannon[i,0] = (ecannon[i,0])*cos(cannonRadian) - (ecannon[i,1])*sin(cannonRadian); //Files through X and Translates to new X
                    ecannon[i,1] = (ecannon[i,1])*cos(cannonRadian) + (xMem)*sin(cannonRadian); //Files through Y and Translates to new Y
                }
            cannonAngle = 0; //Reset Angle
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting
if (fireRate &gt; 0) 
{
    fireRate -= 1;
}

if (fireRate = 0)
{
    fireRate = 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
speed = 2;
alarm[1] = 1;
state = "Idle";
//Move Enemy
if (image_angle - 90 = direction)
    {
        direction = 5 * irandom_range(0, 72);
        state = "Moving";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
speed = 0;
state = "Idle";
//Move Enemy
if (image_angle - 90 = direction)
    {
        direction = 5 * irandom_range(0, 72);
        state = "Moving";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
speed = 2;
alarm[1] = 1;
state = "Idle";
//Move Enemy
if (image_angle - 90 = direction)
    {
        direction = 5 * irandom_range(0, 72);
        state = "Moving";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Enemy
//draw_self();
draw_set_color(c_white);
var i = 0;

//Drawing Enemy Tank
for (i = 0; i &lt; 6; i++)
    { if (i != 6)
        { draw_line(x + etank[i,0],y + etank[i,1], x + etank[i + 1,0], y + etank[i + 1,1])
        }
    }
draw_line(x + etank[0,0],y + etank[0,1], x + etank[6,0], y + etank[6,1]);

//Drawing Enemy Cannon
for (i = 0; i &lt; 7; i++)
    { if (i != 7)
        { draw_line(x + ecannon[i,0],y + ecannon[i,1], x + ecannon[i + 1,0], y + ecannon[i + 1,1])
        }
    }
draw_line(x + ecannon[0,0],y + ecannon[0,1], x + ecannon[7,0], y + ecannon[7,1]);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cannon
draw_set_color(c_white);
if (!instance_exists(Obj_Player))
    { exit
    }
var i = 0
    
//Checking for shoot input. 
if (fireRate &gt;= 0 &amp;&amp; fireRate &lt;= 4) &amp;&amp; (distance_to_object(Obj_Player) &lt; 64)
    {
        draw_line(x + ecannon[2,0], y + ecannon[2,1], x + targetX, y + targetY);
        i = collision_line(x + ecannon[2,0], y + ecannon[2,1], x + targetX, y + targetY, Obj_Player, false, false);
        if (i != 0) &amp;&amp; (fireRate &gt;= 0 &amp;&amp; fireRate &lt;= 1)
            {
                with(i) 
                {
                    if (alarm[0] = -1)
                        { HP -= 1
                        alarm[0] = 15
                        }
                    exit
                }
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
